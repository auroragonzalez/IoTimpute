function [V]=model2indic(D,model,param,p);% model2indic               - indicator covariance model from Gaussian distribution (Jan 1,2001)%% Compute the values of an indicator variogram or covariance function at% specified distances. The indicator variogram or covariance is computed% under the assumption of a Gaussian distribution for one or two given% value(s) of the cumulative distribution function and for a given% theoretical variogram or covariance function model with specified parameters.% % SYNTAX :%% [V]=model2indic(D,model,param,p);%% INPUT :%% D       n by m       matrix of distances for which the indicator%                      variogram or covariance function model is evaluated.% model   string       that contains the name of the variogram or covariance%                      model. Only variogram models that have a covariance%                      counterpart can be used here. % param   1 by k       vector of parameters for the specified variogram or%                      covariance model, where param(1) is the sill of the%                      model and is also the variance of the Gaussian distribution.% p       1 by 1 or 2  cumulative distribution function value(s) for which the%                      indicator variogram or covariance function must be computed.%                      If p is a scalar, the function computes the indicator variogram%                      or covariance function for the probability of being lower than%                      the Gaussian quantile associated with the p value. If p is a%                      1 by 2 vector, the function computes the indicator variogram or%                      covariance function for the probability of belonging to the%                      interval defined by the Gaussian quantiles associated with the%                      values in p, where 0<p(1)<p(2)<1.%% OUTPUT :%% V      indicator covariance/variogram matrix with same size as D.%% NOTE :%% If nested models must be specified, the same conventions as for modelplot.m are used.%%% Initialize the parameters[m,n]=size(D);covparam(1)=1;np=length(p);if iscell(model)==0,  nm=1;  model={model};  param={param}; else  nm=length(model);end;%%% Compute the covariance matrix for variogram%%% or covariance function model with variance%%% reset to 1C=zeros(m,n);sill=0;for i=1:nm,  sill=sill+param{i}(1);  C0=eval([model{i},'(0,param{i})']);  if C0~=0,    C=C+eval([model{i},'(D,param{i})']);  else    C=C+param{i}(1)-eval([model{i},'(D,param{i})']);  end;end;C=C/sill;%%% Case when p is scalarif np==1,  q=gaussinv(p,[0 1]);  for i=1:m,    for j=1:n,      if C(i,j)==1,        C(i,j)=p-p^2;      else        C(i,j)=gaussbicdf(q,q,[0 0 1 1 C(i,j)])-p^2;      end;    end;  end;end;%%% Case when p is vectorif np==2,  if p(1)>=p(2),    error('p(1) must be strictly lower than p(2)');  end;  pinf=p(1);psup=p(2);  qinf=gaussinv(pinf,[0 1]);  qsup=gaussinv(psup,[0 1]);  p=psup-pinf;  for i=1:m,    for j=1:n,      if C(i,j)==1,        C(i,j)=p-p^2;      else        C1=gaussbicdf(qsup,qsup,[0 0 1 1 C(i,j)]);        C2=gaussbicdf(qsup,qinf,[0 0 1 1 C(i,j)]);        C3=gaussbicdf(qinf,qsup,[0 0 1 1 C(i,j)]);        C4=gaussbicdf(qinf,qinf,[0 0 1 1 C(i,j)]);        C(i,j)=C1-C2-C3+C4-p^2;      end;    end;  end;end;%%% Set V for variogram or covariance modelif C0==0,  V=(p-p^2)-C;else  V=C;end;