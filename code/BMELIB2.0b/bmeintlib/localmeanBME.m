function [mkest,mhest,msest,vkest]=localmeanBME(ck,ch,cs,zh,ms,vs,Khh,Ksh,Kss,order);% localmeanBME              - local mean estimation for BME (Jan 1,2001)%% Compute the estimates for the mean at estimation, hard and% soft data locations using generalized least squares, where% the additional variance for the soft data is computed from % uniform distributions.%% SYNTAX :%% [mkest,mhest,msest,vkest]=localmeanBME(ck,ch,cs,zh,ms,vs,Khh,Ksh,Kss,order);%% INPUT :%% ck         1 by d     vector of coordinates for the estimation points,%                       where d is the dimension of the space.% ch         nh by d    matrix of coordinates for the hard data.% cs         ns by d    matrix of coordinates for the soft data.% zh         nh by 1    vector of the values for the hard data at ch.% ms         ns by 1    vector of the mean values for the intervals at cs.% vs         ns by 1    vector of the variance values for the uniform%                       distributions defined by the intervals at cs.% Khh        nh by nh   covariance matrix for the hard data.% Ksh        ns by nh   covariance matrix between hard and soft data.% Kss        ns by ns   covariance matrix for the soft data.% order      scalar     that gives the order of the polynomial mean.%% OUTPUT :%% mkest      scalar     estimate of the mean for the estimation location.% mhest      nh by 1    vector of estimate of the mean for hard data locations.% msest      ns by 1    vector of estimate of the mean for soft data locations.% vkest      scalar     variance of the estimated mean at zk.nh=size(zh,1);ns=size(ms,1);mkest=0;mhest=zeros(nh,1);msest=zeros(ns,1);vkest=0;if ~iscell(ck),  noindex=1;  c=[ch;cs];else  noindex=0;  c{1}=[ch{1};cs{1}];  c{2}=[ch{2};cs{2}];end;Kss=Kss+diag(vs);K=[Khh,Ksh';Ksh,Kss];z=[zh;ms];[best,Vbest,m,index]=bmeregression(c,z,order,K);if isempty(m),  mhest=0;  msest=0;else  mhest=m(1:nh,1);  msest=m(nh+1:nh+ns,1);end;[x]=designmatrix(ck,order);if ~isempty(x),  if noindex==1,    mkest=x*best;    vkest=x*Vbest*x';  else    findindexk=find(index(:,1)==ck{2});    mkest=x*best(findindexk);    vkest=x*Vbest(findindexk,findindexk)*x';  end;end;