function [zk,vk]=kriging(ck,ch,zh,model,param,nhmax,dmax,order,options);% kriging                   - prediction using kriging methods (Jan 1,2001)%% Standard linear kriging algorithm for processing hard data% that can reasonably be assumed as Gaussian distributed. The% function is intendend to be as general as possible, covering% various situations, like non-stationarity of the mean,% multivariate cases, nested models, space-time estimations,% etc. Depending on the case, specific format are needed for% the input variables. This function is a special case of the more% general BMEprobaMoments.mfunction, which processes both hard and % soft data.%% SYNTAX :%% [zk,vk]=kriging(ck,ch,zh,model,param,nhmax,dmax,order,options);%% INPUT :%% ck        nk by d   matrix of coordinates for the estimation locations.%                     A line corresponds to the vector of coordinates at%                     an estimation location, so the number of columns%                     corresponds to the dimension of the space. There is%                     no restriction on the dimension of the space.% ch        nh by d   matrix of coordinates for the hard data locations,%                     with the same convention as for ck.% zh        nh by 1   vector of values for the hard data at the coordinates%                     specified in ch.% model     string    that contains the name of the variogram or covariance%                     model that is used for the estimation (see the MODELS%                     directory). % param     1 by k    vector of values for the parameters of model, according%                     to the convention for the corresponding variogram or %                     covariance model.% nhmax     scalar    maximum number of hard data values that are considered%                     for the estimation at the locations specified in ck.% dmax      scalar    maximum distance between an estimation location and%                     existing hard data locations. All hard data locations%                     separated by a distance smaller than dmax from an%                     estimation location will be included in the estimation%                     process for that location, whereas other hard data%                     locations are neglected.% order     scalar    order of the polynomial mean along the spatial axes at%                     the estimation locations. For the zero-mean case, NaN%                     (Not-a-Number) is used. Note that order=NaN can only be%                     used with covariance models and not with variogram models.% options   scalar    optional parameter that can be used if the default value%                     is not satisfactory (otherwise it can simply be omitted%                     from the input list of variables). options(1) is taking%                     the value 1 or 0 if the user wants or does not want to%                     display the order number of the location which is%                     currently processed, respectively.%% OUTPUT :%% zk        nk by 1   vector of estimated values at the estimation locations. A%                     value coded as NaN means that no estimation has been performed%                     at that location due to the lack of available data. % vk        nk by 1   vector of estimation (kriging) variances at the estimation%                     locations. As for zk, a value coded as NaN means that no%                     estimation has been performed at the corresponding location.%% NOTE :%% All the specific conventions for specifying nested models, multivariate % or space-time cases are the same as for BMEprobaMoments.m.%%%%%% Initialize the parametersif nargin<9,  options(1)=0;end;noindex=~iscell(ck);       % test if there is an index for the variablesif noindex==1,  nk=size(ck,1);           % nk is the number of estimation pointselse  nk=size(ck{1},1);  nindexk=length(ck{2});  if nindexk==1,    ck{2}=ck{2}*ones(nk,1);  end;end;if options(1)==1,  num2strnk=num2str(nk);end;zk=zeros(nk,1)*NaN;vk=zeros(nk,1)*NaN;K0=NaN;%%%%%% Main loop starts hereperc = 0.1;dperc = 0.1;for i=1:nk,  if noindex==1,    ck0=ck(i,:);  else    ck0={ck{1}(i,:),ck{2}(i)};  end;  [chlocal,zhlocal,dh,sumnhlocal]=neighbours(ck0,ch,zh,nhmax,dmax);  if sumnhlocal>0,                           % test if there is at least 1 data     K=coord2K(chlocal,chlocal,model,param);  % built the left-hand side matrix    k=coord2K(chlocal,ck0,model,param);      % built the right-hand side vector    [X,x]=krigconstr(chlocal,ck0,order);    nx=size(X,2);    Kadd=[[K,X];[X',zeros(nx)]];    kadd=[k;x];    lam=Kadd\kadd;                           % compute the kriging weights lam    lam=lam(1:sumnhlocal);                   % remove the Lagrangians from the solution    lamt=lam';    zk(i)=lamt*zhlocal;                      % compute the kriging estimate zk(i)    K0=coord2K(ck0,ck0,model,param);    vk(i)=K0-2*lamt*k+lamt*K*lam;            % compute the kriging variance vk(i) for covariance  end;  if options(1)==1,    %disp([num2str(i),'/',num2strnk]);    if (i/nk >= perc)      disp(['  kriging: ' num2str(100*perc) '% done']);      pause(0.01);      perc = perc + dperc;    end  end;end;if K0==0,                                    % if needed, correct kriging variances for variogram  vk=-vk;end;