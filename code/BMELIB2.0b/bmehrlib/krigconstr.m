function [X,x]=krigconstr(c,ck0,order,select);% krigconstr                - constraints matrix and vector in a kriging system (Jan 1,2001)%% Build the appropriate constraints matrix and vector% associated with a polynomial mean of given order in% a kriging system. If K*L=k is the simple kriging% system, then %% [[K,X];[X',N]*L=[k;x]%% is the universal system with polynomial mean, where% N is an null square matrix. %% SYNTAX :%% [X,x]=krigconstr(c,ck0,order,select); %% INPUT :%% c        n by d         matrix of coordinates for the estimation locations.%                         A line corresponds to the vector of coordinates at%                         an estimation location, so the number of columns%                         corresponds to the dimension of the space. There is%                         no restriction on the dimension of the space.% ck0      1 by d         vector of coordinates for the estimation location. % order    scalar         order of the polynomial mean along the spatial axes%                         at the estimation locations. When order=NaN, an empty%                         matrix is returned.% select   string         optional, that specifies which one of the X matrix or%                         the x vector has to be computed. The choice are :%                         select='left'  for computing the X matrix. The x vector%                         will be empty ;%                         select='right' for computing the x vector. The X matrix%                         will be empty. By default, both X and x are computed.%% OUTPUT :%% X        n by order*d+1 matrix of constraints for the left-hand side of the%                         kriging system.% x        order*d+1 by 1 vector of constraints for the right-hand side of the%                         kriging system.%% NOTE :%% All the specific conventions for specifying nested models,% multivariate or space-time cases are the same as for kriging.m.if nargin<4,  selectX=1;  selectx=1;else  selectX=strcmp(select,'left');  selectx=strcmp(select,'right');end;X=[];x=[];noindex=~iscell(ck0);      if noindex==1,  [n,nd]=size(c);else  [n,nd]=size(c{1});  nv=max([c{2};ck0{2}]);end;if selectX==1,  if noindex==1,    if size(order,2)==1,      order=[order order];    end;    if ~(isnan(order(1)) && isnan(order(2))),      X=[X,ones(n,1)];    end;    if ~isnan(order(1)),      for j=1:order(1),        for k=1:nd-1;          X=[X,c(:,k).^j];        end;      end;    end;    if ~isnan(order(2)),      for j=1:order(2),        X=[X,c(:,nd).^j];      end;    end;  else    if size(order,1)==1,      order=kron(order,ones(nv,1));    end;    if size(order,2)==1,      order=[order order];    end;    for l=1:nv,      findvar=find(c{2}==l);      if ~isempty(findvar),        if ~(isnan(order(l,1)) && isnan(order(l,2))),	  Xvar=zeros(n,1);	  Xvar(findvar)=1;          X=[X,Xvar];        end;        if ~isnan(order(l,1)),          for j=1:order(l,1),            for k=1:nd-1,              Xvar=zeros(n,1);              Xvar(findvar)=c{1}(findvar,k).^j;              X=[X,Xvar];            end;	  end;        end;        if ~isnan(order(l,2)),          for j=1:order(l,2),            Xvar=zeros(n,1);            Xvar(findvar)=c{1}(findvar,nd).^j;            X=[X,Xvar];	  end;        end;      end;    end;  end;end;if selectx==1,  if noindex==1,    if size(order,2)==1,      order=[order order];    end;    if ~(isnan(order(1)) && isnan(order(2))),      x=[x;1];    end;    if ~isnan(order(1)),      for j=1:order(1),        for k=1:nd-1;          x=[x;ck0(k).^j];        end;      end;    end;    if ~isnan(order(2)),      for j=1:order(2),        x=[x;ck0(nd).^j];      end;    end;  else    findvark=ck0{2};    if size(order,1)==1,      order=kron(order,ones(nv,1));    end;    if size(order,2)==1,      order=[order order];    end;    for l=1:nv,      findvar=find(c{2}==l);      if ~isempty(findvar),        if ~(isnan(order(l,1)) && isnan(order(l,2))),          if findvark==l,            x=[x;1];          else     	    x=[x;0];          end;        end;        if ~isnan(order(l,1)),          for j=1:order(l,1),            for k=1:nd-1, 	      if findvark==l,                     x=[x;ck0{1}(k).^j];              else                x=[x;0];              end;            end;	  end;        end;        if ~isnan(order(l,2)),          for j=1:order(l,2), 	    if findvark==l,                   x=[x;ck0{1}(nd).^j];            else              x=[x;0];            end;	  end;        end;      end;    end;  end;end;