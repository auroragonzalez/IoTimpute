function [yk,vk]=krigingT(ck,ch,yh,covmodel,covparam,nhmax,dmax,yfile,cdfyfile,options);% krigingT                  - prediction using kriging methods with transformation (Jan 1,2001)%% Provide kriging estimates when data cannot reasonably be% assumed as Gaussian distributed. As kriging based on the% raw data will not provide very satisfactory results, a% solution is to first transform the data to make them at% least marginally Gaussian distributed, then to perform the% estimation on the Gaussian scale, and finally to back% transform these estimates on the original scale. The% estimates correspond to the expectation of the distribution% on the original scale. %% SYNTAX :%% [yk,vk]=krigingT(ck,ch,yh,covmodel,covparam,nhmax,dmax,yfile,cdfyfile,options);%% INPUT :%% ck        nk by d   matrix of coordinates for the estimation locations.%                     A line corresponds to the vector of coordinates at%                     an estimation location, so the number of columns%                     corresponds to the dimension of the space. There is%                     no restriction on the dimension of the space.% ch        nh by d   matrix of coordinates for the hard data locations,%                     with the same convention as for ck.% yh        nh by 1   vector of the values on the original (non-Gaussian)%                     scale for the hard data at the coordinates specified%                     in ch.% covmodel  string    that contains the name of the covariance model that is%                     used for estimation on the Gaussian scale (see the%                     MODELS directory). Variogram models can not be used with%                     this function. If this model has to be estimated from%                     the data, it is needed to transform the data on the%                     Gaussian scale prior to its estimation (see other2gauss.m). % covparam  1 by k    vector of values for the parameters of covmodel that are%                     defined on the Gaussian scale, according to the convention%                     for the corresponding covariance model. % nhmax     scalar    maximum number of hard data values that are considered%                     for the estimation at the locations specified in ck.% dmax      scalar    maximum distance between an estimation location and%                     existing hard data locations. All hard data locations%                     separated by a distance smaller than dmax from an%                     estimation location will be included in the estimation%                     process for that location, whereas other hard data%                     locations are neglected.% yfile     m by 1    vector of values sorted in ascending order for which the%                     cumulative distribution distribution is provided on the%                     original scale. It is recommended to have a finely%                     discretized set of values, so computations can be realized%                     on a fine scale.% cdfyfile  m by 1    vector of values for the cumulative distribution function%                     at the yfile values.% options   scalar    optional parameter that can be used if the default value%                     is not satisfactory (otherwise it can simply be omitted%                     from the input list of variables). options(1) is taking%                     the value 1 or 0 if the user wants or does not want to%                     display the order number of the location which is%                     currently processed, respectively.%% OUTPUT :%% yk        nk by 1   vector of the estimated expected values on the original%                     scale at the estimation locations. A value coded as NaN%                     means that no estimation has been performed at that location,%                     due to the lack of available data.% vk        nk by 1   vector of estimation (kriging) variances on the original%                     scale at the estimation locations, with same convention as%                     for yk.%% NOTE :%% 1- Using krigingT.m requires that the variable has a constant mean.% If this hypothesis does not hold, it is necessary to remove first the% values of the mean from the yh vector. This can be done using, e.g., the% regression.m or the kernelregression.m functions.%% 2- If there are several variables to be processed at the same time (see the% multivariate case described in kriging.m above), the yfile and cdfyfile% variables must be defined as 1 by nv cell arrays, where each cell% corresponds to the definition of the distribution for the corresponding% variable. For the other variables, all the specific conventions are the% same as for kriging.m.if nargin<10,  options(1)=0;end;noindex=~iscell(ck);if noindex==1,  nk=size(ck,1);  nh=size(ch,1);  indexk=ones(nk,1);  indexh=ones(nh,1);  zh=other2gauss(yh,yfile,cdfyfile);  yfile={yfile};  cdfyfile={cdfyfile};else  nk=size(ck{1},1);  nindexk=length(ck{2});  if nindexk==1,    ck{2}=ck{2}*ones(nk,1);  end;  indexk=ck{2};  indexh=ch{2};  zh=other2gauss({yh,indexh},yfile,cdfyfile);end;[zk,vzk]=kriging(ck,ch,zh,covmodel,covparam,nhmax,dmax,NaN,options);if options(1)==1,  num2strnk=num2str(nk);end;yk=zeros(nk,1);vk=zeros(nk,1);for i=1:nk,  if vzk(i)==0,    yk(i)=gauss2other(zk(i),yfile{indexk(i)},cdfyfile{indexk(i)});    vk(i)=0;  else    z=gaussinv(cdfyfile{indexk(i)},[zk(i),vzk(i)]);    y=gauss2other(z,yfile{indexk(i)},cdfyfile{indexk(i)});    pdfy=cdf2pdf(y,cdfyfile{indexk(i)});    normconst=trapezint(y,pdfy,-Inf,Inf);    pdfy=pdfy/normconst;    yk(i)=trapezint(y,y.*pdfy,-Inf,Inf);    vk(i)=trapezint(y,((y-yk(i)).^2).*pdfy,-Inf,Inf);  end;  if options(1)==1,    disp([num2str(i),'/',num2strnk]);  end;end;