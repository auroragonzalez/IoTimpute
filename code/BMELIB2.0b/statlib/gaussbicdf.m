function [cdf]=gaussbicdf(z1,z2,param,options);% gaussbicdf                - bivariate Gaussian cumulative distribution function (Jan 1,2001)%% Compute the values of a bivariate Gaussian cumulative% distribution function for a set of couples of values.% The gaussbicdf.m function uses a FORTRAN77 subroutine% for evaluating the corresponding double integrals. %% SYNTAX :%% [cdf]=gaussbicdf(z1,z2,param,options);%% INPUT :%% z1       n by k   matrix of values for the first variable.% z2       n by k   matrix of values for the second variable, where each%                   element in z1 is associated with the corresponding%                   element in z2. Either z1 or z2 can be scalar. In such%                   a case, the corresponding variable is kept constant and%                   the output variable has the same size than the other matrix.% param    1 by 5   vector of parameters for the bivariate distribution, where :%                   param(1) and param(2) are the mean of the first and second%                   variables,%                   param(3) and param(4) are the variances of the first and second%                   variables,%                   param(5) is the correlation coefficient.% options  1 by 2   vector of optional parameters that can be used if default%                   values are not satisfactory (otherwise this vector can simply%                   be omitted from the input list of variables), where :%                   options(1) is the maximum number of evaluations for the integral%                              (default value is 50000),%                   options(2) is the relative error on the estimation of the integral%                              (default value is 1e-4).%% OUTPUT :%% cdf      n by k   matrix of values for the cumulative distribution function computed%                   at the couples of values specified in z1 and z2.if nargin<4,  options(1)=50000;  options(2)=1e-4;end;sz1=size(z1);sz2=size(z2);if sum(sz1)==2,  z1=ones(sz2)*z1;end;if sum(sz2)==2,   z2=ones(sz1)*z2; end;[n,k]=size(z1);m1=param(1);m2=param(2);v1=param(3);v2=param(4);rho=param(5);z1=(z1-m1)/sqrt(v1);z2=(z2-m2)/sqrt(v2);C=[1 rho;rho 1];if ((rho~=1)&(rho~=-1)&(rho~=0)),  cdf=zeros(n,k);  for i=1:n,    for j=1:k,      [p]=mvnAG1([-15;-15],[z1(i,j);z2(i,j)],C,options(1),0,options(2));      cdf(i,j)=p;    end;  end;else  if rho==0,         %%% independance case    cdf=gausscdf(z1,[0 1]).*gausscdf(z2,[0 1]);  end;  if rho==1,         %%% degenerate case : z2=z1    z=min(z1,z2);    cdf=gausscdf(z,[0 1]);  end;  if rho==-1,        %%% degenerate case : z2=-z1    cdf=zeros(size(z1));    cond=(z2>-z1);    zmax=max(z2(cond),z1(cond));    zmin=min(z2(cond),z1(cond));    cdf(cond)=gausscdf(zmax,[0 1])-gausscdf(zmin,[0 1]);  end;end;