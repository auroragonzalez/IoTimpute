function [param,fval,exitflag,output]=modelfit(d,v,o,model,param0,options);% modelfit                  - single variogram/covariance least squares fitting (Jan 1,2001)%% Iterated non linear weighted least squares estimation% procedure for selecting the parameters of a single (cross)% variogram or covariance function model specified by the% user. Weights are taken as proportional to the number of% pairs of points that were used in the estimation for each% distance class.%% SYNTAX :%% [param,fval,exitflag,output]=modelfit(d,v,o,model,param0,options);%% INPUT :%% d          nc by 1      vector giving the sorted values of the mean distance separating%                         the pairs of points that belong to the same distance class. % v          nc by 1      vector of estimated (cross) variogram or covariance values.% o          nc by 1      vector giving the number of pairs of points that belong to the %                         corresponding distance classes.% model      string       that contains the name of the variogram or covariance model for%                         which parameters are sought (see the MODELS directory for possible%                         names of variograms and covariance functions). % param0     1 by k       initial guess values for the parameters of model, according to the%                         convention for the corresponding variogram or covariance model.% options    1 by 1 or 4  vector of optional parameters that can be used if default values%                         are not satisfactory (otherwise this vector can simply be omitted%                         from the input list of variables), where :%                         options(1) displays the estimated and fitted model if the value is%                         set to one (default value is 0),%                         options(2) is the termination tolerance for the estimation of the%                         parameters (default value is 1e-4),%                         options(3) is the termination tolerance for the quadratic objective%                         function (default value is 1e-4),%                         options(4) is the maximum number of iterations (default value is%                         400 * # of models). %% OUPUT :%% param      1 by k       estimated values of the parameters for model, according to a%                         weighted least square criterion.%% The three following outputs are standard outputs of the FMINSEARCH function :%% fval       scalar       returns the value of the objective function,%                         described in MODEL, at PARAM% exitflag   scalar       If EXITFLAG is:%                          1 then FMINSEARCH converged with a solution X.%                          0 then the maximum number of iterations was reached.% output     struct array OUTPUT with the number of iterations taken in OUTPUT.iterations. % % NOTE :%% For a detailed discussion about the coding of the model and param0% variables for nested models, the reader is referred to the detailed% description given for the kriging.m function.%%%%%% Initialize the parametersnc=length(d);if iscell(model)==0,  nm=1;  np=length(param0);  model={model}; else  nm=length(model);  np=zeros(nm,1);  for i=1:nm,    np(i)=length(param0{i});  end;end;if nargin<6,  options1=0;  fminsearchoptions=optimset('Display','off','TolX',1e-4,'TolFun',1e-4,'MaxIter',1000);else  options1=options(1);  fminsearchoptions=optimset('Display','off','TolX',options(2),'TolFun',options(3),'MaxIter',options(4));end;%%%%%% Reset param0 from cell array to vector paramtemp=[];if nm>1,  for i=1:nm,    paramtemp=[paramtemp,param0{i}];  end;  param0=paramtemp;end;%%%%%% Parameter estimation by least squares[param,fval,exitflag,output]=fminsearch(@fminsmodelfit,param0,fminsearchoptions,...			  d,v,o,model,nc,nm,np);%%%%%% Reset param from vector to cell arrayif nm>1,  paramtemp={};  index=0;  for i=1:nm,    paramtemp{i}=param(index+1:index+np(i));    index=index+np(i);  end;  param=paramtemp;end;%%%%%% Display the fitted variogram/covariance if options1==1,  disp(['Computation stopped after ',num2str(output.iterations),'/',num2str(fminsearchoptions.MaxIter),' iterations']);  vtheor=0;  if nm==1,    vtheor=vtheor+eval([model{1},'(d,param)']);  else    for i=1:nm,      vtheor=vtheor+eval([model{i},'(d,param{i})']);    end;  end;  figure;  plot(d,v,'*');hold on;  plot(d,vtheor);  set(gca,'FontSize',6);   xlabel('Distance','FontSize',8);  ylabel('Variogram/Covariance','FontSize',8);  title('Estimated and fitted variograms/covariances','FontSize',8);  minv=min([v;vtheor]);  maxv=max([v;vtheor]);  axis([0 max(d) min([0;-1.1*sign(minv)*minv]) max([0;1.1*sign(maxv)*maxv])]);  plot([0 max(d)],[0 0],':');end;