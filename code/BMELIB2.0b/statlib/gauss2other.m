function [y]=gauss2other(z,yfile,cdfyfile,method);% gauss2other               - transform from a Gaussian pdf to an arbitrary pdf (Jan 1,2001)%% Do the monotonic transformation which is reciprocal to the% transformation made by other2gauss.m. The function tranforms% a vector of zero mean unit variance Gaussian distributed% values into a vector of arbitrary distributed values.%% SYNTAX :%% [y]=gauss2other(z,yfile,cdfyfile,method);%% INPUT :%% z          n by 1   vector of zero mean unit variance Gaussian%                     distributed values.% yfile      k by 1   vector of values used to define the cumulative%                     distribution function for the y values.% cdfyfile   k by 1   vector of the cumulative distribution function%                     values at the yfile values.% method     string   which is optional and specifies the interpolation%                     method to be used. See interp1.m for available%                     methods. Default value is 'linear'.%% OUTPUT :%% y          n by 1   vector of non Gaussian transformed values associated%                     with the z values.%% NOTE :%% 1- For the z values associated with values for the cumulative% distribution function that are outside the definition% given by (yfile,cdfyfile), the corresponding output y values% are coded as NaN's.%% 2- It is also possible to process several variables at the same time% (multivariate case). It is then needed to specify additional tags% for the z values. These tags are provided as a vector of values that% refer to the variable, the values ranging from 1 to nv, where nv is% the number of variables. E.g., if there are 3 variables, an indexz% column vector must be defined, having same number of elements than z% (the function will also accepts a single integer value if all the% values belong to the same variable). The z and indexz vectors are% grouped using the MATLAB cell array notation, so that z={z,indexz}% is now the correct input variable. The yfile and cdfyfile vectors are% now cell arrays too, where each cell corresponds to the appropriate% vector of values for the corresponding variable.if nargin<4,  method='linear';end;if ~iscell(z),  cdfz=gausscdf(z,[0 1]);  y=interp1(cdfyfile,yfile,cdfz,method);else  index=z{2};  if length(index)==1,    cdfz=gausscdf(z{1},[0 1]);    y=interp1(cdfyfile{index},yfile{index},cdfz,method);  else    n=length(z{1});    y=zeros(n,1)*NaN;    nv=max(index);    for i=1:nv,      indexi=find(index==i);      cdfz=gausscdf(z{1}(indexi),[0 1]);      y(indexi)=interp1(cdfyfile{i},yfile{i},cdfz,method);    end;  end;end;