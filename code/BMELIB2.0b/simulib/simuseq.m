function [zh]=simuseq(ch,covmodel,covparam,nhmax,dmax,options);% simuseq                   - simulation by sequential method (Jan 1,2001)%% Implementation of the sequential non conditional simulation% method based on the iterated use of conditional distributions,% so that values are simulated one by one. This simulation method% is especially recommended for simulating few sets of numerous% hard values (above few hundreds), as it does not require the% storage of a global covariance matrix into memory. The simuseq.m% function is based on the use of the kriging.m function. As for% simuchol.m, simulated values are zero mean Gaussian distributed.%% SYNTAX :%% [zh]=simuseq(ch,covmodel,covparam,nhmax,dmax,options);%% INPUT :%% ch         nh by d   matrix of coordinates for the locations%                      where hard data have to be simulated. A%                      line corresponds to the vector of coordinates%                      at a simulation location, so the number of%                      columns corresponds to the dimension of the%                      space. There is no restriction on the dimension%                      of the space.% covmodel   string    string that contains the name of the covariance%                      model which is used for the simulation (see the%                      MODELS directory). Variogram models are not%                      available for this function.% covparam   1 by k    vector of values for the parameters of covmodel,%                      according to the convention for the corresponding%                      covariance model.% nhmax      scalar    maximum number of previously simulated hard data%                      values that are considered for the simulation at%                      each new location in the sequence. % dmax       scalar    maximum distance between a simulation location and%                      previously visited simulation locations. All locations%                      separated by a distance smaller than dmax from a%                      simulation location will be included in the simulation%                      process for that location, whereas other locations are%                      neglected. When there are no available previously%                      visited simulation locations in the local neighbourhood%                      (this is likely at the beginning of the simulation),%                      dmax is repeatidly increased until there is at least%                      one value in the neighbourhood.% options    1 by 2    vector of optional parameters that can be used if default%                      values are not satisfactory (otherwise this vector can%                      simply be omitted from the input list of variables), where :%                      options(1)=1 for displaying the simulation location%                      currently processed (default value is 0),%                      options(2)=1 for a random selection of the visited simulation%                      locations in the sequence (default value is 1).%% OUTPUT :%% zh         nh by 1   vector of zero mean simulated Gaussian distributed hard%                      values at the coordinates specified in ch.%% NOTE :%% All the specific conventions for specifying nested models, multivariate% or space-time cases are the same as for kriging.m.if nargin<6,  options(1)=0;  options(2)=1;end;isarray=iscell(ch);if ~isarray,  nh=size(ch,1);else  nh=length(ch{2});end;if options(1)==1,  num2strnh=num2str(nh);end;if options(2)==1,  index=randperm(nh);  if ~isarray,    ch=ch(index,:);  else    ch{1}=ch{1}(index,:);    ch{2}=ch{2}(index);  end;end;if ~isarray,  chtemp(1,:)=ch(1,:);else  chtemp{1}(1,:)=ch{1}(1,:);  chtemp{2}(1)=ch{2}(1);end;vk=coord2K(chtemp,chtemp,covmodel,covparam);zhtemp(1)=randn*sqrt(vk);order=NaN;for i=2:nh,   if ~isarray,    ck=ch(i,:);  else    ck={ch{1}(i,:),ch{2}(i)};  end;  zk=NaN;  dmaxiter=0;  while isnan(zk),    dmaxiter=dmaxiter+dmax;    [zk,vk]=kriging(ck,chtemp,zhtemp,covmodel,covparam,nhmax,dmaxiter,order);  end;  zhtemp(i,1)=randn*sqrt(vk)+zk;  if ~isarray,    chtemp(i,:)=ck;  else    chtemp{1}(i,:)=ck{1};    chtemp{2}(i,1)=ck{2};  end;  if options(1)==1,    disp([num2str(i),'/',num2strnh]);  end;end;zh=zhtemp;if options(2)==1,  [ignore,index]=sort(index);  zh=zh(index);end;