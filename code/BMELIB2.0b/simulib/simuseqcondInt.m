function [zh]=simuseqcondInt(ch,ch0,cs0,zh0,a0,b0,covmodel,covparam,nhmax,nsmax,dmax,order,options);% simuseqcondInt            - conditional simulation by sequential method with interval data (Jan 1,2001)%% Conditional simulation of a set of random variables% at a set of cartesian coordinates using a sequential% method. There are hard and interval conditioning data%% SYNTAX :%% [zh]=simuseqcondInt(ch,ch0,cs0,zh0,a0,b0,covmodel,covparam,nhmax,nsmax,dmax,order,options);%% INPUT :%% ch         nh by d   matrix of coordinates for the locations%                      where hard data have to be simulated. A%                      line corresponds to the vector of coordinates%                      at a simulation location, so the number of%                      columns corresponds to the dimension of the%                      space. There is no restriction on the dimension%                      of the space.% ch0        nh0 by d  matrix of coordinates for the hard conditioning%                      values, with the same convention as for ch.% cs0        ns0 by d  matrix of coordinates for the soft conditioning%                      values, with the same convention as for ch.% zh0        nh0 by 1  vector of the hard conditioning values at the%                      coordinates specified in ch0.% a0         ns0 by 1  vector of values for the lower bound of the intervals%                      at the coordinates specified in cs0.% b0         ns0 by 1  vector of values for the upper bound of the intervals%                      at the coordinates specified in cs0.% covmodel   string    string that contains the name of the covariance%                      model which is used for the simulation (see the%                      MODELS directory). Variogram models are not%                      available for this function.% covparam   1 by k    vector of values for the parameters of covmodel,%                      according to the convention for the corresponding%                      covariance model.% nhmax      scalar    maximum number of conditioning or previously%                      simulated hard data values that are considered for%                      the simulation at each new location in the sequence.% nsmax      scalar    maximum number of conditionin soft data that are%                      considered for the simulation at each new location in%                      the sequence. % dmax       scalar    maximum distance between a simulation location and%                      conditioning or previously visited simulation locations.%                      All locations separated by a distance smaller than dmax%                      from a simulation location will be included in the%                      simulation process for that location, whereas other%                      locations are neglected. When there are no locations%                      in the local neighbourhood, dmax is repeatidly increased%                      until there is at least one value in the neighbourhood.% order      scalar    order of the polynomial mean along the spatial axes at%                      the simulation locations. For the zero-mean case, NaN%                      (Not-a-Number) is used. Note that order=NaN can only be%                      used with covariance models and not with variogram models.% options    1 by 4    vector of optional parameters that can be used if default%                      values are not satisfactory (otherwise this vector can%                      simply be omitted from the input list of variables), where :%                      options(1)=1 for displaying the simulation location currently%                      processed (default value is 0),%                      options(2)=1 for a random selection of the visited simulation%                      locations during the sequential process (default value is 1),%                      options(3) specifies the maximum number of evaluation that%                      can be done by the FORTRAN77 subroutines for the integrals%                      (default value is 50 000. This value should be increased if a%                      warning message appears on the screen during the computation),%                      options(4) specifies the maximum admissible relative error on%                      the estimation of these integrals (default value is 1e-4).%% OUTPUT :%% z          nh by 1   vector of simulated hard values at the coordinates specified in%                      ch. Depending on the choice of order, the values are not%                      necessarily zero mean distributed.%% NOTE :%% 1- Note that in the case there are no available hard data at all,% ch0 and zh0 can be entered as the empty [ ] matrices.%% 2- All the specific conventions for specifying nested models,% multivariate or space-time cases are the same as for kriging.m.%%%%% Error messageindex=iscell(ch);          % test if there is an index for the variablesif index==1,  nh=size(ch{1},1);        % nh is the number of simulation points  nindexh=length(ch{2});  if nindexh==1,    ch{2}=ch{2}*ones(nh,1);  end;end;index=findpairs(ch,ch0);if ~isempty(index),  error('ch and ch0 cannot contain identical coordinates');end;%%%%% Initialize the parametersif nargin<13,  options(1)=0;  options(2)=1;  options(3)=50000;  options(4)=1e-4;end;isarray=iscell(ch);if ~isarray,  nh=size(ch,1);  nh0=size(ch0,1);else  nh=length(ch{2});  nh0=length(ch0{2});end;if options(1)==1,  num2strnh=num2str(nh);end;if options(2)==1,  index=randperm(nh);  if ~isarray,    ch=ch(index,:);  else    ch{1}=ch{1}(index,:);    ch{2}=ch{2}(index);  end;end;chtemp=ch0;zhtemp=zh0;zs0=(b0+a0)/2;vs0=((b0-a0).^2)/12;for i=1:nh,  if ~isarray,    ck=ch(i,:);  else    ck={ch{1}(i,:),ch{2}(i)};  end;  zk=NaN;  dmaxiter=0;  while isnan(zk),    dmaxiter=dmaxiter+dmax;    [zk,vk]=krigingME(ck,chtemp,cs0,zhtemp,zs0,vs0,covmodel,covparam,nhmax,nsmax,dmaxiter,order);  end;  zfile=(-4:0.1:4)'*sqrt(vk)+zk;   [zhest,pdfest,info]=BMEintervalPdf(zfile,ck,chtemp,cs0,zhtemp,a0,b0,covmodel,...                                     covparam,nhmax,nsmax,dmaxiter,order,options);  cdfest=pdf2cdf(zhest,pdfest);  p=rand*(max(cdfest)-min(cdfest))+min(cdfest);  zhtemp(i+nh0,1)=interp1monotone(cdfest,zhest,p);  if ~isarray,    chtemp(i+nh0,:)=ck;  else    chtemp{1}(i+nh0,:)=ck{1};    chtemp{2}(i+nh0,1)=ck{2};  end;  if options(1)==1,    disp([num2str(i),'/',num2strnh]);  end;end;zh=zhtemp(nh0+1:nh+nh0);if options(2)==1,  [ignore,index]=sort(index);  zh=zh(index);end;%%%% function yi=interp1monotone(x,y,xi)%% A modified interp1 function that works if y is non strictly monotonic %function yi=interp1monotone(x,y,xi);idx=find(xi==x);if ~isempty(idx);  yi=min(y(idx));else  i1=max(find(x<xi));  i2=min(find(x>xi));  x1=x(i1);  x2=x(i2);  y1=y(i1);  y2=y(i2);  yi=y1+(y2-y1)*(xi-x1)/(x2-x1);end;