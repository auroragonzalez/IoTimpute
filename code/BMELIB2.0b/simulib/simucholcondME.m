function [Zh,L]=simucholcondME(ch,ch0,cs0,zh0,zs0,vs0,covmodel,covparam,ns);% simucholcondME            - conditional simulation by the Cholesky method with measurement errors (Jan 1,2001)%% Simulate values conditionally to both hard and soft data.% The probabilistic soft data are assumed to be completely% characterized by their mean and their variance (see% krigingME.m for more information on the Mesurement Error% concept).%% SYNTAX :%% [Zh,L]=simucholcondME(ch,ch0,cs0,zh0,zs0,vs0,covmodel,covparam,ns);%% INPUT :%% ch         nh by d   matrix of coordinates for the locations%                      where hard data have to be simulated. A%                      line corresponds to the vector of coordinates%                       at a simulation location, so the number of%                      columns corresponds to the dimension of the%                      space. There is no restriction on the dimension%                      of the space.% ch0        nh0 by d  matrix of coordinates for the hard conditioning%                      values, with the same convention as for ch.% cs0        ns0 by d  matrix of coordinates for the soft conditioning%                      values, with the same convention as for ch.% zh0        nh0 by 1  vector of the hard conditioning values at the%                      coordinates specified in ch0.% zs0        ns0 by 1  vector of the values for the mean of the conditioning%                      soft data at the coordinates specified in cs0.% vs0        ns0 by 1  vector of values for the variance of the conditioning%                      soft data at the coordinates specified in cs0.% covmodel   string    string that contains the name of the covariance%                      model which is used for the simulation (see the%                      MODELS directory). Variogram models are not%                      available for this function.% covparam   1 by k    vector of values for the parameters of covmodel,%                      according to the convention for the corresponding%                      covariance model.% ns         scalar    number of sets of simulated values which are required.%                      If the optional ns variable is omitted from the input%                      list of variables, a single set of simulated values is%                      generated.% % OUTPUT :%% Zh         nh by ns  matrix of simulated Gaussian distributed hard values at%                      the coordinates specified in ch. Each column corresponds%                      to a different simulation, so that if ns=1 or if ns is%                      omitted, Zh is a column vector of values. Each simulated%                      vector of values is statistically independant from the%                      others.% L          nh by nh  upper triangular matrix obtained from the Choleski%                      decomposition of the global covariance matrix C for%                      values at the ch coordinates, such that C=L'*L.% % OUTPUT :%% Zh  n by ns matrix of conditionally simulated values% L   n by n upper triangular matrix such that K=L'*L%            is the covariance matrix%% NOTE :%% 1- When using simucholcondME.m, the hard and data values% should be zero mean Gaussian distributed. If this is not% the case, the mean should be substracted from the zh0 and% zs0 values prior to the simulation, and appropriate% transformations should be performed (see other2gauss.m).%% 2- Note that, as for krigingME.m, ch0 and zh0 can be entered% as the empty [ ] matrices in the case there are no available% hard data at all.%% 3- All the specific conventions for specifying nested models,% multivariate or space-time cases are the same as for kriging.m.%%%%% Error messageisarray=iscell(ch);        % test if there is an index for the variablesif isarray==1,  nh=size(ch{1},1);        % nh is the number of simulation points  nindexh=length(ch{2});  if nindexh==1,    ch{2}=ch{2}*ones(nh,1);  end;end;index=findpairs(ch,ch0);if ~isempty(index),  error('ch and ch0 cannot contain identical coordinates');end;%%%%% Initialize the parametersif nargin<9,  ns=1;end;%%%%% Use the conditional distributions[K11]=coord2K(ch,ch,covmodel,covparam);if isarray==1,  ch0s0={[ch0{1};cs0{1}],[ch0{2};cs0{2}]};  [K22]=coord2K(ch0s0,ch0s0,covmodel,covparam);  K22=K22+diag([zeros(size(ch0{1},1),1);vs0]);  [K12]=coord2K(ch,ch0s0,covmodel,covparam);else  [K22]=coord2K([ch0;cs0],[ch0;cs0],covmodel,covparam);  K22=K22+diag([zeros(size(ch0,1),1);vs0]);  [K12]=coord2K(ch,[ch0;cs0],covmodel,covparam);end;invK22=inv(K22);K12invK22=K12*invK22;K1if2=K11-K12invK22*K12';m1if2=K12invK22*[zh0;zs0];L=chol(K1if2);Lt=L';n=size(Lt,1);Zh=zeros(n,ns);for i=1:ns,  Zh(:,i)=Lt*randn(n,1)+m1if2;end;