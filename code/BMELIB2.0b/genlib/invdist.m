function [zk]=invdist(ck,ch,zh,power,nhmax,dmax,options);% invdist                   - prediction using an inverse distance weighting (Jan 1,2001)%% Estimate at a set of locations the values of a variable, based on% the knowledge of the hard data values at another set of locations.% The method uses an inverse distance weighting, so that the% estimated value at a location is a weighted linear combination of% the hard data values at surrounding locations. The weights are% positive and proportional to the inverse of a power function of the% Euclidian distances between the estimation locations and the locations% where hard data values are known.%% SYNTAX :%% [zk]=invdist(ck,ch,zh,power,nhmax,dmax,options); %% INPUT :%% ck       nk by d   matrix of coordinates for the estimation locations.%                    A line corresponds to the vector of coordinates at%                    an estimation location, so the number of columns in%                    ck corresponds to the dimension of the space. There%                    is no restriction on the dimension of the space.% ch       nh by d   matrix of coordinates for the hard data locations,%                    with the same convention as for ck.% zh       nh by 1   vector of values for the hard data at the coordinates%                    specified in ch.% power    scalar    value of the power to be used in the computation of the weights.%                    Special cases are power=Inf for the nearest neighbour estimate%                    and power=0 for an equal weighting. Values between 0 and Inf%                    correspond to intermediate situations.% nhmax    scalar    maximum number of hard data values that are considered for the%                    computations at each estimation location.% dmax     scalar    maximum distance between an estimation location and existing hard%                    data locations. All hard data locations separated by a distance%                    smaller than dmax from an estimation location will be included in%                    the estimation process for that location, whereas other hard data%                    locations are neglected.% options  scalar    optional parameter that can be used if default value is not%                    satisfactory (otherwise this vector can simply be omitted from the%                    input list of variables). options is equal to 1 or 0, depending if%                    the user wants or does not want to display the order number of the%                    location which is currently processed by the function. Default %                    value is 0.%% OUTPUT :%% zk       nk by 1   vector of estimated values at the estimation locations. Values coded%                    as NaN mean that no estimation has been performed at that location,%                    due to the lack of available data in the neighbourhood.%%%%%% Initialize the parametersif nargin<7,  options(1)=0;end;nk=size(ck,1);           % nk is the number of estimation pointsnh=size(ch,1);           % nh is the number of hard data pointszk=zeros(nk,1)*NaN;if options(1)==1,  num2strnk=num2str(nk);end;%%%%%% Main loop starts herefor i=1:nk,  ck0=ck(i,:);  [chlocal,zhlocal,dh,sumnhlocal]=neighbours(ck0,ch,zh,nhmax,dmax);  if sumnhlocal>0,    if power==Inf,      findmind=find(dh==min(dh));      zk(i)=zhlocal(findmind(1));    else      lam=(1./dh).^power;      lam=lam/sum(lam);      zk(i)=lam'*zhlocal;    end;  end;  if options(1)==1,    disp([num2str(i),'/',num2strnk]);  end;end;