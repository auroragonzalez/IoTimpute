function poleplot(c,z,Property,Value,z0);% poleplot                  - 3-D perspective plot at 2-D coordinates using poles (Jan 1,2001)%% Plot the values of a vector at a set of two dimensional coordinates % in a three dimensional perspective using poles of various lengths.% The lengths of the poles are proportional to the corresponding values.% Positive values have upward orientated poles, negative values have% downward orientated poles.%% SYNTAX :%% poleplot(c,z,Property,Value); %% INPUT :%% c           n by 2 matrix of coordinates for the locations to be displayed.%                    Each line corresponds to the vector of coordinates at a location,%                    so the number of columns is equal to two.% z           n by 1 column vector of values to be coded as poles.% Property    1 by k cell array where each cell is a string that contains a legal name%                    of a plot3 object property. This variable is optional, as default%                    values are used if Property is missing from the input list of variables.%                    Execute get(H), where H is a plot3 handle, to see a list of plot3 object%                    properties and their current values. Execute set(H) to see a list of%                    plot3 object properties and legal property values. See also the help%                    for plot3.m.% Value       1 by k cell array where each cell is a legal value for the corresponding plot3%                    object property as specified in Property.%% NOTE :%% For example,%% poleplot(c,z,Property,Value)%% where Property={'Marker','MarkerEdgeColor','MarkerFaceColor'}%       Value={'^',[0 0 1],[1 0 0]}%% will plot red triangles with a blue border. By default,% poleplot(c,z) will use points with the default properties% for plot3.m.if nargin>2,  if ~iscell(Property),    Property={Property};    Value={Value};    noptions=1;  else    noptions=length(Property);  end;else  noptions=0;end;if nargin<5, z0=0; end  test=(ishold==1);x=c(:,1);y=c(:,2);xmin=min(x);xmax=max(x);ymin=min(y);ymax=max(y);for i=1:max(size(z)),   a=plot3(x(i),y(i),z(i),'o');   for j=1:noptions,     set(a,Property{j},Value{j});   end;   LineColor=get(a,'MarkerEdgeColor');   b=plot3([x(i);x(i)],[y(i);y(i)],[z(i);z0]);hold on;   if ~ischar(LineColor),     set(b,'Color',LineColor);   end;end;grid on;if test==0,   hold off;end;